{"ast":null,"code":"export default {\n  name: \"GridPedidos\",\n  data() {\n    return {\n      burgers: null,\n      burger_id: null,\n      status: []\n    };\n  },\n  methods: {\n    async getPedidos() {\n      const req = await fetch('http://localhost:3000/burgers');\n      const data = await req.json();\n      this.burgers = data;\n\n      // Resgata os status de pedidos\n      this.getStatus();\n    },\n    async getStatus() {\n      const req = await fetch('http://localhost:3000/status');\n      const data = await req.json();\n      this.status = data;\n    },\n    async deleteBurger(id) {\n      const req = await fetch(`http://localhost:3000/burgers/${id}`, {\n        method: \"DELETE\"\n      });\n      const res = await req.json();\n      this.getPedidos();\n    },\n    async updateBurger(event, id) {\n      const option = event.target.value;\n      const dataJson = JSON.stringify({\n        status: option\n      });\n      const req = await fetch(`http://localhost:3000/burgers/${id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: dataJson\n      });\n      const res = await req.json();\n      console.log(res);\n    }\n  },\n  mounted() {\n    this.getPedidos();\n  }\n};","map":{"version":3,"names":["name","data","burgers","burger_id","status","methods","getPedidos","req","fetch","json","getStatus","deleteBurger","id","method","res","updateBurger","event","option","target","value","dataJson","JSON","stringify","headers","body","console","log","mounted"],"sources":["/Users/hoffmann/VscodeProjects/burguer/src/components/GridPedidos.vue"],"sourcesContent":["<template>\n    <div id=\"burger-table\" v-if=\"burgers\">\n        <div>\n            <div id=\"burger-table-heading\">\n                <div class=\"order-id\">#:</div>\n                <div>Cliente:</div>\n                <div>Pão:</div>\n                <div>Carne:</div>\n                <div>Opcionais:</div>\n                <div>Ações:</div>\n            </div>\n        </div>\n        <div id=\"burger-table-rows\">\n            <div class=\"burger-table-row\" v-for=\"burger in burgers\" :key=\"burger.id\">\n                <div class=\"order-number\">{{ burger.id }}</div>\n                <div>{{ burger.nome }}</div>\n                <div>{{ burger.pao }}</div>\n                <div>{{ burger.carne }}</div>\n                <div>\n                    <ul v-for=\"(opcional, index) in burger.opcionais\" :key=\"index\">\n                        <li>{{ opcional }}</li>\n                    </ul>\n                </div>\n                <div>\n                    <select name=\"status\" class=\"status\" @change=\"updateBurger($event, burger.id)\">\n                        <option :value=\"s.tipo\" v-for=\"s in status\" :key=\"s.id\" :selected=\"burger.status == s.tipo\">\n                            {{ s.tipo }}\n                        </option>\n                    </select>\n                    <button class=\"delete-btn\" @click=\"deleteBurger(burger.id)\">Cancelar</button>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div v-else>\n        <h2>Não há pedidos no momento!</h2>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: \"GridPedidos\",\n    data() {\n        return {\n            burgers: null,\n            burger_id: null,\n            status: []\n        }\n    },\n    methods: {\n        async getPedidos() {\n            const req = await fetch('http://localhost:3000/burgers')\n\n            const data = await req.json()\n\n            this.burgers = data\n\n            // Resgata os status de pedidos\n            this.getStatus()\n\n        },\n\n        async getStatus() {\n\n            const req = await fetch('http://localhost:3000/status')\n\n            const data = await req.json()\n\n            this.status = data\n\n        },\n\n        async deleteBurger(id) {\n\n            const req = await fetch(`http://localhost:3000/burgers/${id}`, {\n                method: \"DELETE\"\n            });\n\n            const res = await req.json()\n\n            this.getPedidos()\n\n        },\n\n        async updateBurger(event, id) {\n\n            const option = event.target.value;\n\n            const dataJson = JSON.stringify({ status: option });\n\n            const req = await fetch(`http://localhost:3000/burgers/${id}`, {\n                method: \"PATCH\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: dataJson\n            });\n\n            const res = await req.json()\n\n            console.log(res)\n\n        }\n    },\n    mounted() {\n        this.getPedidos()\n    }\n}\n\n</script>\n\n<style scoped></style>\n  "],"mappings":"AAwCA,eAAe;EACXA,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE,IAAI;MACfC,MAAM,EAAE;IACZ;EACJ,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,UAAUA,CAAA,EAAG;MACf,MAAMC,GAAE,GAAI,MAAMC,KAAK,CAAC,+BAA+B;MAEvD,MAAMP,IAAG,GAAI,MAAMM,GAAG,CAACE,IAAI,CAAC;MAE5B,IAAI,CAACP,OAAM,GAAID,IAAG;;MAElB;MACA,IAAI,CAACS,SAAS,CAAC;IAEnB,CAAC;IAED,MAAMA,SAASA,CAAA,EAAG;MAEd,MAAMH,GAAE,GAAI,MAAMC,KAAK,CAAC,8BAA8B;MAEtD,MAAMP,IAAG,GAAI,MAAMM,GAAG,CAACE,IAAI,CAAC;MAE5B,IAAI,CAACL,MAAK,GAAIH,IAAG;IAErB,CAAC;IAED,MAAMU,YAAYA,CAACC,EAAE,EAAE;MAEnB,MAAML,GAAE,GAAI,MAAMC,KAAK,CAAC,iCAAiCI,EAAE,EAAE,EAAE;QAC3DC,MAAM,EAAE;MACZ,CAAC,CAAC;MAEF,MAAMC,GAAE,GAAI,MAAMP,GAAG,CAACE,IAAI,CAAC;MAE3B,IAAI,CAACH,UAAU,CAAC;IAEpB,CAAC;IAED,MAAMS,YAAYA,CAACC,KAAK,EAAEJ,EAAE,EAAE;MAE1B,MAAMK,MAAK,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK;MAEjC,MAAMC,QAAO,GAAIC,IAAI,CAACC,SAAS,CAAC;QAAElB,MAAM,EAAEa;MAAO,CAAC,CAAC;MAEnD,MAAMV,GAAE,GAAI,MAAMC,KAAK,CAAC,iCAAiCI,EAAE,EAAE,EAAE;QAC3DC,MAAM,EAAE,OAAO;QACfU,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEJ;MACV,CAAC,CAAC;MAEF,MAAMN,GAAE,GAAI,MAAMP,GAAG,CAACE,IAAI,CAAC;MAE3BgB,OAAO,CAACC,GAAG,CAACZ,GAAG;IAEnB;EACJ,CAAC;EACDa,OAAOA,CAAA,EAAG;IACN,IAAI,CAACrB,UAAU,CAAC;EACpB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}