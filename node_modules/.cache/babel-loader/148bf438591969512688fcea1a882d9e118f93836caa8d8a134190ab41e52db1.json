{"ast":null,"code":"import Message from './Message';\nexport default {\n  name: \"BurgerForm\",\n  data() {\n    return {\n      paes: null,\n      carnes: null,\n      opcionaisdata: null,\n      nome: null,\n      pao: null,\n      carne: null,\n      opcionais: [],\n      status: \"Solicitado\",\n      msg: null\n    };\n  },\n  methods: {\n    async getIngredientes() {\n      const req = await fetch('http://localhost:3000/ingredientes');\n      const data = await req.json();\n      this.paes = data.paes;\n      this.carnes = data.carnes;\n      this.opcionaisdata = data.opcionais;\n    },\n    async createBurger(e) {\n      e.preventDefault();\n      const data = {\n        nome: this.nome,\n        carne: this.carne,\n        pao: this.pao,\n        opcionais: Array.from(this.opcionais),\n        status: \"Solicitado\"\n      };\n      const dataJson = JSON.stringify(data);\n      const req = await fetch(\"http://localhost:3000/burgers\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: dataJson\n      });\n      const res = await req.json();\n      console.log(res);\n      this.msg = \"Pedido realizado com sucesso!\";\n\n      // clear message\n      setTimeout(() => this.msg = \"\", 3000);\n\n      // limpar campos\n      this.nome = \"\";\n      this.carne = \"\";\n      this.pao = \"\";\n      this.opcionais = [];\n    }\n  },\n  mounted() {\n    this.getIngredientes();\n  }\n};","map":{"version":3,"names":["Message","name","data","paes","carnes","opcionaisdata","nome","pao","carne","opcionais","status","msg","methods","getIngredientes","req","fetch","json","createBurger","e","preventDefault","Array","from","dataJson","JSON","stringify","method","headers","body","res","console","log","setTimeout","mounted"],"sources":["/Users/hoffmann/VscodeProjects/burguer/src/components/BurgerForm.vue"],"sourcesContent":["<template>\n    <Message :msg=\"msg\" v-show=\"msg\" />\n    <div>\n        <form id=\"burger-form\" method=\"POST\" @submit=\"createBurger\">\n            <div class=\"input-container\">\n                <label for=\"nome\">Nome do cliente:</label>\n                <input type=\"text\" id=\"nome\" name=\"nome\" required\n                     v-model=\"nome\" placeholder=\"Digite o seu nome\">\n            </div>\n            <div class=\"input-container\">\n                <label for=\"pao\">Escolha o pão:</label>\n                <select name=\"pao\" id=\"pao\" v-model=\"pao\">\n                    <option value=\"\" selected>Selecione o seu pão</option>\n                    <option v-for=\"pao in paes\" :key=\"pao.id\" :value=\"pao.tipo\">{{ pao.tipo }}</option>\n                </select>\n            </div>\n            <div class=\"input-container\">\n                <label for=\"carne\">Escolha a carne do seu Burger:</label>\n                <select name=\"carne\" id=\"carne\" v-model=\"carne\">\n                    <option value=\"\">Selecione o tipo de carne</option>\n                    <option v-for=\"carne in carnes\" :key=\"carne.id\" :value=\"carne.tipo\">{{ carne.tipo }}</option>\n                </select>\n            </div>\n            <div id=\"opcionais-container\" class=\"input-container\">\n                <label id=\"opcionais-title\" for=\"opcionais\">Selecione os opcionais:</label>\n                <div class=\"checkbox-container\" v-for=\"opcional in opcionaisdata\" :key=\"opcional.id\">\n                    <input type=\"checkbox\" name=\"opcionais\" v-model=\"opcionais\" :value=\"opcional.tipo\">\n                    <span>{{ opcional.tipo }}</span>\n                </div>\n            </div>\n            <div class=\"input-container\">\n                <input class=\"submit-btn\" type=\"submit\" value=\"Criar meu Burger!\">\n            </div>\n        </form>\n    </div>\n</template>\n\n<script>\n\nimport Message from './Message'\n\nexport default {\n    name: \"BurgerForm\",\n    data() {\n        return {\n            paes: null,\n            carnes: null,\n            opcionaisdata: null,\n            nome: null,\n            pao: null,\n            carne: null,\n            opcionais: [],\n            status: \"Solicitado\",\n            msg: null\n        }\n    },\n    methods: {\n        async getIngredientes() {\n            const req = await fetch('http://localhost:3000/ingredientes')\n            const data = await req.json()\n\n            this.paes = data.paes\n            this.carnes = data.carnes\n            this.opcionaisdata = data.opcionais\n        },\n\n        async createBurger(e) {\n\n            e.preventDefault()\n\n            const data = {\n                nome: this.nome,\n                carne: this.carne,\n                pao: this.pao,\n                opcionais: Array.from(this.opcionais),\n                status: \"Solicitado\"\n            }\n\n            const dataJson = JSON.stringify(data)\n\n            const req = await fetch(\"http://localhost:3000/burgers\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: dataJson\n            });\n\n            const res = await req.json()\n\n            console.log(res)\n\n            this.msg = \"Pedido realizado com sucesso!\"\n\n            // clear message\n            setTimeout(() => this.msg = \"\", 3000)\n\n            // limpar campos\n            this.nome = \"\"\n            this.carne = \"\"\n            this.pao = \"\"\n            this.opcionais = []\n\n        }\n    },\n    mounted() {\n        this.getIngredientes()\n    },\n}\n\n</script>\n\n<style scoped>\n#burger-form {\n    max-width: 400px;\n    margin: 0 auto;\n}\n\n.input-container {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 20px;\n}\n\nlabel {\n    font-weight: bold;\n    margin-bottom: 15px;\n    color: #222;\n    ;\n    padding: 5px 10px;\n    border-left: 4px solid #fcba03;\n}\n\ninput,\nselect {\n    padding: 5px 10px;\n    width: 300px;\n}\n\n#opcionais-container {\n    flex-direction: row;\n    flex-wrap: wrap;\n}\n\n#opcionais-title {\n    width: 100%;\n}\n\n.checkbox-container {\n    display: flex;\n    align-items: flex-start;\n    width: 50%;\n    margin-bottom: 20px;\n}\n\n.checkbox-container span,\n.checkbox-container input {\n    width: auto;\n}\n\n.checkbox-container span {\n    margin-left: 6px;\n    font-weight: bold;\n}\n\n.submit-btn {\n    background-color: #222;\n    color: #fcba03;\n    font-weight: bold;\n    border: 2px solid #222;\n    padding: 10px;\n    font-size: 16px;\n    margin: 0 auto;\n    cursor: pointer;\n    transition: .5s;\n}\n\n.submit-btn:hover {\n    background-color: transparent;\n    color: #222;\n}\n</style>\n  "],"mappings":"AAuCA,OAAOA,OAAM,MAAO,WAAU;AAE9B,eAAe;EACXC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,IAAI,EAAE,IAAI;MACVC,MAAM,EAAE,IAAI;MACZC,aAAa,EAAE,IAAI;MACnBC,IAAI,EAAE,IAAI;MACVC,GAAG,EAAE,IAAI;MACTC,KAAK,EAAE,IAAI;MACXC,SAAS,EAAE,EAAE;MACbC,MAAM,EAAE,YAAY;MACpBC,GAAG,EAAE;IACT;EACJ,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,eAAeA,CAAA,EAAG;MACpB,MAAMC,GAAE,GAAI,MAAMC,KAAK,CAAC,oCAAoC;MAC5D,MAAMb,IAAG,GAAI,MAAMY,GAAG,CAACE,IAAI,CAAC;MAE5B,IAAI,CAACb,IAAG,GAAID,IAAI,CAACC,IAAG;MACpB,IAAI,CAACC,MAAK,GAAIF,IAAI,CAACE,MAAK;MACxB,IAAI,CAACC,aAAY,GAAIH,IAAI,CAACO,SAAQ;IACtC,CAAC;IAED,MAAMQ,YAAYA,CAACC,CAAC,EAAE;MAElBA,CAAC,CAACC,cAAc,CAAC;MAEjB,MAAMjB,IAAG,GAAI;QACTI,IAAI,EAAE,IAAI,CAACA,IAAI;QACfE,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBD,GAAG,EAAE,IAAI,CAACA,GAAG;QACbE,SAAS,EAAEW,KAAK,CAACC,IAAI,CAAC,IAAI,CAACZ,SAAS,CAAC;QACrCC,MAAM,EAAE;MACZ;MAEA,MAAMY,QAAO,GAAIC,IAAI,CAACC,SAAS,CAACtB,IAAI;MAEpC,MAAMY,GAAE,GAAI,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QACrDU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEL;MACV,CAAC,CAAC;MAEF,MAAMM,GAAE,GAAI,MAAMd,GAAG,CAACE,IAAI,CAAC;MAE3Ba,OAAO,CAACC,GAAG,CAACF,GAAG;MAEf,IAAI,CAACjB,GAAE,GAAI,+BAA8B;;MAEzC;MACAoB,UAAU,CAAC,MAAM,IAAI,CAACpB,GAAE,GAAI,EAAE,EAAE,IAAI;;MAEpC;MACA,IAAI,CAACL,IAAG,GAAI,EAAC;MACb,IAAI,CAACE,KAAI,GAAI,EAAC;MACd,IAAI,CAACD,GAAE,GAAI,EAAC;MACZ,IAAI,CAACE,SAAQ,GAAI,EAAC;IAEtB;EACJ,CAAC;EACDuB,OAAOA,CAAA,EAAG;IACN,IAAI,CAACnB,eAAe,CAAC;EACzB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}